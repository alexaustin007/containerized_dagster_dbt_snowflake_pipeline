2025-05-13 22:12:36 +0000 - dagster - DEBUG - __ASSET_JOB - adf1f545-f89f-46db-bffa-23e51359036a - 7107 - LOGS_CAPTURED - Started capturing logs in process (pid: 7107).
2025-05-13 22:12:36 +0000 - dagster - DEBUG - __ASSET_JOB - adf1f545-f89f-46db-bffa-23e51359036a - 7107 - dbt_transform - STEP_START - Started execution of step "dbt_transform".
2025-05-13 22:12:36 +0000 - dagster - DEBUG - __ASSET_JOB - adf1f545-f89f-46db-bffa-23e51359036a - dbt_transform - Loading file from: /app/storage/load_file_to_snowflake using PickledObjectFilesystemIOManager...
2025-05-13 22:12:36 +0000 - dagster - ERROR - __ASSET_JOB - adf1f545-f89f-46db-bffa-23e51359036a - 7107 - dbt_transform - STEP_FAILURE - Execution of step "dbt_transform" failed.

dagster._core.errors.DagsterExecutionLoadInputError: Error occurred while loading input "load_file_to_snowflake" of step "dbt_transform"::

FileNotFoundError: [Errno 2] No such file or directory: '/app/storage/load_file_to_snowflake'

Stack Trace:
  File "/usr/local/lib/python3.10/site-packages/dagster/_core/execution/plan/utils.py", line 56, in op_execution_error_boundary
    yield
  File "/usr/local/lib/python3.10/site-packages/dagster/_core/execution/plan/inputs.py", line 619, in _load_input_with_input_manager
    value = input_manager.load_input(context)
  File "/usr/local/lib/python3.10/site-packages/dagster/_core/storage/upath_io_manager.py", line 406, in load_input
    return self._load_single_input(path, context)
  File "/usr/local/lib/python3.10/site-packages/dagster/_core/storage/upath_io_manager.py", line 273, in _load_single_input
    obj = self.load_from_path(context=context, path=path)
  File "/usr/local/lib/python3.10/site-packages/dagster/_core/storage/fs_io_manager.py", line 284, in load_from_path
    with path.open("rb") as file:
  File "/usr/local/lib/python3.10/site-packages/upath/implementations/local.py", line 134, in open
    return PosixPath.open(self, mode, buffering, encoding, errors, newline)
  File "/usr/local/lib/python3.10/pathlib.py", line 1119, in open
    return self._accessor.open(self, mode, buffering, encoding, errors,

